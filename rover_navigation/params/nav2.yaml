bt_navigator:
  ros__parameters:
    use_sim_time: True
    transform_tolerance: 5.0
    global_frame: map
    robot_base_frame: base_link
    odom_topic: odom
    default_bt_xml_filename: navigate_w_replanning_time.xml
    plugin_lib_names:
      - nav2_compute_path_to_pose_action_bt_node
      - nav2_follow_path_action_bt_node
      - nav2_back_up_action_bt_node
      - nav2_spin_action_bt_node
      - nav2_wait_action_bt_node
      - nav2_clear_costmap_service_bt_node
      - nav2_is_stuck_condition_bt_node
      - nav2_goal_reached_condition_bt_node
      - nav2_goal_updated_condition_bt_node
      - nav2_initial_pose_received_condition_bt_node
      - nav2_reinitialize_global_localization_service_bt_node
      - nav2_rate_controller_bt_node
      - nav2_distance_controller_bt_node
      - nav2_speed_controller_bt_node
      - nav2_truncate_path_action_bt_node
      - nav2_goal_updater_node_bt_node
      - nav2_recovery_node_bt_node
      - nav2_pipeline_sequence_bt_node
      - nav2_round_robin_node_bt_node
      - nav2_transform_available_condition_bt_node
      - nav2_time_expired_condition_bt_node
      - nav2_distance_traveled_condition_bt_node

bt_navigator_rclcpp_node:
  ros__parameters:
    use_sim_time: True

controller_server:
  ros__parameters:
    use_sim_time: True
    controller_frequency: 20.0
    min_x_velocity_threshold: 0.001
    min_y_velocity_threshold: 0.2
    min_theta_velocity_threshold: 0.001
    progress_checker_plugin: progress_checker
    goal_checker_plugin: goal_checker
    controller_plugins: [FollowPath]

    progress_checker:
      plugin: nav2_controller::SimpleProgressChecker
      required_movement_radius: 0.5
      movement_time_allowance: 10.0

    goal_checker:
      plugin: nav2_controller::SimpleGoalChecker
      xy_goal_tolerance: 0.25
      yaw_goal_tolerance: 0.25
      stateful: True

    FollowPath:
      plugin: nav2_regulated_pure_pursuit_controller::RegulatedPurePursuitController
      transform_tolerance: 5.0

      desired_linear_vel: 0.25
      max_linear_accel: 3.0
      max_linear_decel: 3.0
      max_angular_accel: 3.0

      lookahead_dist: 1.0
      min_lookahead_dist: 0.3
      max_lookahead_dist: 1.0
      lookahead_time: 2.0
      use_velocity_scaled_lookahead_dist: true

      min_approach_linear_velocity: 0.1
      use_approach_linear_velocity_scaling: false
      max_allowed_time_to_collision: 1.0

      use_regulated_linear_velocity_scaling: true
      use_cost_regulated_linear_velocity_scaling: false
      regulated_linear_scaling_min_radius: 0.9
      regulated_linear_scaling_min_speed: 0.1

      use_rotate_to_heading: false
      allow_reversing: true
      rotate_to_heading_min_angle: 0.785
      rotate_to_heading_angular_vel: 0.1

      goal_dist_tol: 0.25
      cost_scaling_dist: 0.3
      cost_scaling_gain: 1.0
      inflation_cost_scaling_factor: 3.0

controller_server_rclcpp_node:
  ros__parameters:
    use_sim_time: True

local_costmap:
  local_costmap:
    ros__parameters:
      update_frequency: 2.0
      publish_frequency: 2.0
      transform_tolerance: 5.0
      global_frame: odom
      robot_base_frame: base_link
      use_sim_time: True
      rolling_window: True
      width: 6
      height: 6
      resolution: 0.05
      footprint: "[[0.3, 0.3], [0.3, -0.3], [-0.3, -0.3], [-0.3, 0.3]]"
      plugins: [voxel_layer, inflation_layer]
      inflation_layer:
        plugin: nav2_costmap_2d::InflationLayer
        cost_scaling_factor: 10.0
        inflation_radius: 0.3
      voxel_layer:
        plugin: nav2_costmap_2d::VoxelLayer
        enabled: True
        publish_voxel_map: True
        z_resolution: 0.05
        z_voxels: 16
        max_obstacle_height: 2.0
        mark_threshold: 0
        observation_sources: scan
        scan:
          topic: scan
          max_obstacle_height: 2.0
          clearing: True
          marking: True
          data_type: LaserScan
      static_layer:
        map_subscribe_transient_local: True
      always_send_full_costmap: True
  local_costmap_client:
    ros__parameters:
      use_sim_time: True
  local_costmap_rclcpp_node:
    ros__parameters:
      use_sim_time: True

global_costmap:
  global_costmap:
    ros__parameters:
      update_frequency: 1.0
      publish_frequency: 1.0
      transform_tolerance: 5.0
      global_frame: odom
      robot_base_frame: base_link
      use_sim_time: True
      footprint: "[[0.3, 0.3], [0.3, -0.3], [-0.3, -0.3], [-0.3, 0.3]]"
      resolution: 0.05
      plugins: [static_layer, obstacle_layer, inflation_layer]
      obstacle_layer:
        plugin: nav2_costmap_2d::ObstacleLayer
        enabled: True
        observation_sources: scan
        scan:
          topic: scan
          max_obstacle_height: 2.0
          clearing: True
          marking: True
          data_type: LaserScan
      static_layer:
        plugin: nav2_costmap_2d::StaticLayer
        map_subscribe_transient_local: True
      inflation_layer:
        plugin: nav2_costmap_2d::InflationLayer
        cost_scaling_factor: 10.0
        inflation_radius: 0.3
      always_send_full_costmap: True
  global_costmap_client:
    ros__parameters:
      use_sim_time: True
  global_costmap_rclcpp_node:
    ros__parameters:
      use_sim_time: True

planner_server:
  ros__parameters:
    planner_plugins: [GridBased]
    use_sim_time: True

    GridBased:
      plugin: smac_planner/SmacPlanner
      tolerance: 0.5 # tolerance for planning if unable to reach exact pose, in meters, for 2D node
      downsample_costmap: false # whether or not to downsample the map
      downsampling_factor: 1 # multiplier for the resolution of the costmap layer (e.g. 2 on a 5cm costmap would be 10cm)
      allow_unknown: false # allow traveling in unknown space
      max_iterations: -1 # maximum total iterations to search for before failing
      max_on_approach_iterations: 1000 # maximum number of iterations to attempt to reach goal once in tolerance, 2D only
      max_planning_time_ms: 2000.0 # max time in ms for planner to plan, smooth, and upsample. Will scale maximum smoothing and upsampling times based on remaining time after planning.
      smooth_path: true # Whether to smooth searched path
      motion_model_for_search: "DUBIN" # 2D Moore, Von Neumann; SE2 Dubin, Redds-Shepp
      angle_quantization_bins: 200 # For SE2 node: Number of angle bins for search, must be 1 for 2D node (no angle search)
      minimum_turning_radius: 0.3 # For SE2 node & smoother: minimum turning radius in m of path / vehicle
      reverse_penalty: 1.0 # For Reeds-Shepp model: penalty to apply if motion is reversing, must be => 1
      change_penalty: 0.2 # For SE2 node: penalty to apply if motion is changing directions, must be >= 0
      non_straight_penalty: 1.05 # For SE2 node: penalty to apply if motion is non-straight, must be => 1
      cost_penalty: 1.3 # For SE2 node: penalty to apply to higher cost zones

      smoother:
        smoother:
          w_curve: 20000.0 # weight to minimize curvature of path
          w_dist: 0.0 # weight to bind path to original as optional replacement for cost weight
          w_smooth: 20000.0 # weight to maximize smoothness of path
          w_cost: 0.025 # weight to steer robot away from collision and cost
          cost_scaling_factor: 10.0 # this should match the inflation layer's parameter

        # I do not recommend users mess with this unless they're doing production tuning
        optimizer:
          max_time: 0.10 # maximum compute time for smoother
          max_iterations: 1000 # max iterations of smoother
          debug_optimizer: false # print debug info
          gradient_tol: 1.0e-10
          fn_tol: 1.0e-20
          param_tol: 1.0e-15
          advanced:
            min_line_search_step_size: 1.0e-20
            max_num_line_search_step_size_iterations: 50
            line_search_sufficient_function_decrease: 1.0e-20
            max_num_line_search_direction_restarts: 10
            max_line_search_step_expansion: 50

planner_server_rclcpp_node:
  ros__parameters:
    use_sim_time: True

recoveries_server:
  ros__parameters:
    costmap_topic: local_costmap/costmap_raw
    footprint_topic: local_costmap/published_footprint
    cycle_frequency: 10.0
    recovery_plugins: [backup, wait, spin]
    backup:
      plugin: nav2_recoveries/BackUp
    wait:
      plugin: nav2_recoveries/Wait
    spin:
      plugin: nav2_recoveries/Spin
    global_frame: map
    robot_base_frame: base_link
    transform_timeout: 0.1
    use_sim_time: True
    simulate_ahead_time: 2.0
    max_rotational_vel: 0.3
    min_rotational_vel: 0.1
    rotational_acc_lim: 0.5
